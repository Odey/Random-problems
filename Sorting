import random

def bubbleSort(lst):
	n = len(lst)
	for i in range(n):
		for j in range(n-1-i):
			if lst[j]>lst[j+1]:
				lst[j+1],lst[j]=lst[j],lst[j+1]
	
	return lst

def selectionSort(lst):
	n = len(lst)
	for i in range(n):
		min1 = i
		for j in range(i+1,n):
			if lst[j] < lst[min1]:
				min1 = j
		lst[min1],lst[i]=lst[i],lst[min1]	
	return lst
	
def InsertionSort(lst):
	n = len(lst)
	for i in range(1,n):
		curr = lst[i]
		j = i-1
		while j>= 0  and curr<lst[j]:
			lst[j+1]=lst[j]
			j -= 1
		lst[j+1] = curr
	return lst
	

def MergeSort(lst):
	if len(lst) > 1  :
		mid = len(lst)//2
		lefthalf = lst[:mid]
		righthalf = lst [mid:]
		
		MergeSort(lefthalf)
		MergeSort(righthalf)
		
		i =0
		j= 0
		k = 0
		
		while i < len(lefthalf) and j<len(righthalf):
			if lefthalf[i] < righthalf[j]:
				lst[k]=lefthalf[i]
				i +=1
			else:
				lst[k] = righthalf[j]
				j +=1
			k += 1
		while i< len(lefthalf):
			lst[k]=lefthalf[i]
			i +=1
			k +=1
		while j< len(righthalf):
			lst[k]=righthalf[j]
			j +=1
			k +=1
	return lst

def QuickSort(lst, strt,last):
	n = len(lst)
	pivot = strt
	lft_mark = pivot+1
	rht_mark = last
	left_swap =0
	rht_swap = 0
	while lft_mark < rht_mark:
		if lst[lft_mark] > lst[pivot]:
			left_swap = lft_mark
		else:
			lft_mark +=1
			left_swap = 0
		if lst[rht_mark] < lst[pivot]:
			rht_swap = rht_mark
		else:
			rht_mark -=1
			rht_swap = 0
		
		if left_swap and rht_swap:
			lst[left_swap],lst[rht_swap]=lst[rht_swap], lst[left_swap]
			lft_mark +=1
			rht_mark -=1
			left_swap = 0
			rht_swap =0
			
	lst[pivot],lst[rht_mark]=lst[rht_mark],lst[pivot]
	QuickSort(lst, 0, rht_mark-1)
	QuickSort(lst,rht_mark+1,n)
	
	return lst
	
	
	
	
	
lst = random.sample(range(1,100), 15)
print(lst)
print ("-----------BuBBle Sort------")
#rt = bubbleSort(lst)
#print(rt)

print ("-----------Selection Sort------")
#rt = selectionSort(lst)
#print(rt)

print ("-----------Insertion Sort------")
#rt = InsertionSort(lst)
#print(rt)

print ("-----------Merge Sort------")
#rt = MergeSort(lst)
#print(rt)

print ("-----------Quick Sort------")
rt = QuickSort(lst,0,len(lst)-1)
print(rt)

# quick sort
def partition(myList, start, end):
    pivot = myList[start]
    left = start+1
    # Start outside the area to be partitioned
    right = end
    done = False
    while not done:
        while left <= right and myList[left] <= pivot:
            left = left + 1
        while myList[right] >= pivot and right >=left:
            right = right -1
        if right < left:
            done= True
        else:
            # swap places
            temp=myList[left]
            myList[left]=myList[right]
            myList[right]=temp
    # swap start with myList[right]
    temp=myList[start]
    myList[start]=myList[right]
    myList[right]=temp
    return right


def quicksort(myList, start, end):
    if start < end:
        # partition the list
        split = partition(myList, start, end)
        # sort both halves
        quicksort(myList, start, split-1)
        quicksort(myList, split+1, end)
    return myList



def main():
    myList = [7,2,5,1,29,6,4,19,11]
    sortedList = quicksort(myList,0,len(myList)-1)
    print(sortedList)
    
main()


